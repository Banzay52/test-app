# This is the main configuration file for the application.
# ~~~~~
play.allowGlobalApplication=false

application.host = "localhost:9000"
application.host = ${?APPLICATION_HOST}
application.baseUrl = "https://"${application.host}

# Version
version.branch = ${?VERSION_BRANCH}
version.buildno = ${?VERSION_BUILDNO}

# Secret key
# ~~~~~
# The secret key is used to secure cryptographics functions.
# If you deploy your application to several instances be sure to use the same key!
play.http.secret.key="changeme"
play.http.secret.key=${?APPLICATION_SECRET}

# Session
# ~~~~~
play.http.session.domain = ${?SESSION_DOMAIN}

# The application languages
# ~~~~~
play.i18n.langs = ["en", "de"]

# Define the Router object to use for this application.
# This router will be looked up first when the application is starting up,
# so make sure this is the entry point.
# Furthermore, it's assumed your route file is named properly.
# So for an application router like `conf/my.application.Router`,
# you may need to define a router file `my.application.routes`.
# Default to Routes in the root package (and `conf/routes`)
# play.http.router=my.application.Routes
play.http.router = application.Routes

# Database configuration
# ~~~~~
# You can declare as many datasources as you want.
# By convention, the default datasource is named `default`
db.default {
  driver = com.mysql.jdbc.Driver
  url = "jdbc:mysql://"${MYSQL_HOST}":"${MYSQL_PORT}"/"${MYSQL_DATABASE}"?autoReconnect=true&useSSL=false&sessionVariables=sql_mode=ANSI_QUOTES"
  username = ${?MYSQL_USER}
  password = ${?MYSQL_PASSWORD}
  jndiName = "DefaultDS"

  # You can turn on SQL logging for any datasource
  # https://www.playframework.com/documentation/latest/Highlights25#Logging-SQL-statements
  #default.logSql=true
}

jpa.default = "defaultPersistenceUnit"

# CMS
# ~~~
# Our CMS settings go here
# Note: Always access them through Cms.getConfig().* in code.

cms {
  blocks {
    enabled += "blocks.pageblock.DefaultPage"
    enabled += "blocks.teaserblock.TeaserBlock"
    enabled += "crud.page.CarInventoryPage"

    disabled += "ch.insign.cms.models.PageBlock"
    disabled += "ch.insign.cms.blocks.searchresultblock.SearchResultBlock"
  }

  sites = [
    {
      name: site1.ch
      key: site1
      hosts: [
        "*"
      ]
      langs: {
        frontend: [de, en]
        backend: [en]
      }
      logoPath: "assets/images/play.png"
    }
    {
      name: site2.ch
      key: site2
      hosts: [
        "play-cms-2.loc",
      ]
      langs: {
        frontend: [en]
        backend: [en]
      }
      logoPath: "assets/images/play.png"
    }
    #  {
    #    name: default
    #    key:""
    #    hosts: ["*"]
    #  }
  ]

  context {
    slot2.allowedSubblocks = [HorizontalContentBlock]
    mainContext.allowedSubblocks = [ContentBlock, HorizontalCollectionBlock]
    sidebarContext.allowedSubblocks = [ContentBlock, HorizontalCollectionBlock]
    bottomContext.allowedSubblocks = [TeaserBlock]
  }

  ## Block underlying settings
  blockcache.enabled = false

  imageupload {
    enable = true
    rootpath = /uploads
    wwwroot = /uploads
  }

  filemanager.enable = true
  filemanager.urlPrefix = ${FILEMANAGER_BASE_URL}

  enableResetRoute = true

  defaultLanguage = en

  # Add CSP headers in addition to the ones loaded by CMS
  csp.responseHeader_additional = "www.plantuml.com "${cms.filemanager.urlPrefix}

  # SMTP
  smtp {
    mock = true
    mock = ${?SMTP_MOCK}
    host = "localhost"
    host = ${?SMTP_HOST}
    port = 25
    port = ${?SMTP_PORT}
  }

  ## Elastic Search
  search.elastic {
    enabled = false
    enabled = ${?ELASTICSEARCH_ENABLE}
  }

  user {
    passwordPattern = "^((?=.*\\d)(?=.*[a-zA-Z])).{6,}$"
  }
}

## Elastic Search
elastic {
  enabled = false
  enabled = ${?ELASTICSEARCH_ENABLE}

  # The name of the elastic search index
  index = ${?ELASTICSEARCH_INDEX}

  # The host address to bind to
  host = ${?ELASTICSEARCH_HOST}

  # The port to bind to
  port = ${?ELASTICSEARCH_PORT}

  # Settings for the highlighted search fragments
  fragment {
    # The size of a highlighted fragment in number of characters
    size = 700

    # The maximum number of highlighted fragments
    count = 5
  }
}

# Allowed hosts
play.filters.hosts {
  allowed: [
    "localhost",
    ${cms.filemanager.urlPrefix}
  ]
}

# Metrics Filter
filter.metrics = true

# Gzip Filter
filter.gzip = true

# HTML Compressor Filter
filter.htmlCompressor = true

# CSRF Filter
filter.csrf = false
play.filters.disabled+=play.filters.csrf.CSRFFilter

# Override HTMLCompressorFilter
play.modules.disabled += "com.mohiva.play.htmlcompressor.HTMLCompressorFilterModule"
play.modules.enabled += "ch.insign.cms.inject.HTMLCompressorFilterModule"

# Override Formatters
play.modules.disabled += "play.data.format.FormattersModule"
play.modules.disabled += "ch.insign.cms.inject.FormattersModule"
play.modules.enabled += "inject.DemoProjectFormattersModule"

# Override BootstrapperModule
play.modules.disabled += "ch.insign.cms.inject.BootstrapperModule"
play.modules.enabled += "inject.DemoProjectBootstrapperModule"

# Override AuthorizationHandler
play.modules.disabled += "ch.insign.playauth.inject.AuthorizationHandlerModule"
play.modules.disabled += "ch.insign.cms.inject.AuthorizationHandlerModule"
play.modules.enabled += "inject.DemoProjectAuthorizationHandlerModule"

# Override CmsApi
play.modules.disabled += "ch.insign.cms.inject.CmsApiModule"
play.modules.enabled += "inject.DemoProjectApiModule"

# Override PartyManager
play.modules.disabled += "ch.insign.playauth.inject.PartyServiceModule"
play.modules.enabled += "inject.DemoProjectAuthModule"

# Override PartyViewModule
play.modules.disabled += "ch.insign.cms.inject.PartyViewModule"
play.modules.enabled += "inject.DemoProjectPartyViewModule"

# Enable demo project modules
play.modules.enabled += "inject.DemoProjectRepositoryModule"
play.modules.enabled += "inject.DemoProjectMapperModule"
play.modules.enabled += "inject.DemoProjectStaticCmsBlockModule"
play.modules.enabled += "inject.DemoProjectViewModule"
play.modules.enabled += "ch.insign.cms.inject.EmailModule"

# Override page wrapper
play.modules.disabled += "ch.insign.cms.blocks.pages.PageWrapperModule"
play.modules.enabled += "inject.DemoPageWrapperModule"

# Enable block modules
play.modules.enabled += "blocks.pageblock.DefaultPageModule"
play.modules.enabled += "blocks.errorblock.DefaultErrorPageModule"
play.modules.enabled += "blocks.teaserblock.TeaserBlockModule"
play.modules.enabled += "crud.page.CarInventoryPageModule"

# Take control of how the application is initialized
play.application.loader = "inject.DemoProjectApplicationLoader"

#Automatic cleanup of demo content
demo.scheduler.reset.enabled = false
demo.scheduler.reset.enabled = ${?RESET_BY_SCHEDULE}
play.modules.enabled += "inject.DemoProjectCleanupSchedulerModule"
