# DevOps based on play-cms/devops
#
# GitFlow branching model: https://nvie.com/posts/a-successful-git-branching-model/
#
# DEV environment:
# - branch: master
# - deploy: automatically after push to master
#
# STAGE environment:
# - branch: production with tag
# - deploy: automatically after create a new tag for production branch
#
# PROD environment:
# - branch: production with tag
# - deploy: manually via Pipeline (job: deploy_prod_k8s)

variables:
  SBT_OPTS: "-Dsbt.global.base=sbt-cache/.sbtboot -Dsbt.boot.directory=sbt-cache/.boot -Dsbt.ivy.home=sbt-cache/.ivy"
  SBT_CACHE_DIR: "sbt-cache/.ivy/cache"

cache:
  key: "$CI_COMMIT_REF_SLUG"
  untracked: true
  paths:
    - "sbt-cache/.ivy/cache"
    - "sbt-cache/.boot"
    - "sbt-cache/.sbtboot"
    - "sbt-cache/target"

stages:
  - test
  - publish
  - deploy
  - switch

# Test the application
# branches: master, 2.5.x
Test master:
  image: docker.insign.rocks/play-cms/devops
  stage: test
  tags:
    - sbt
  script:
    - ci test ${CI_BUILD_REF_NAME}
  variables:
    ANSIBLE_OPTION_PLAYCMS_GIT_VERSION: "${CI_BUILD_REF_NAME}"
  only:
    - master
    - /^*\.*\.x$/

# Test the application
# branch: production with tag
Test production:
  image: docker.insign.rocks/play-cms/devops
  stage: test
  tags:
    - sbt
  script:
    - ci test ${CI_BUILD_REF_NAME}
  variables:
    ANSIBLE_OPTION_PLAYCMS_GIT_VERSION: "2.7.x"
  only:
    - tags

# Publish the application to docker registry
# branches: master, 2.5.x
Publish master:
  image: docker.insign.rocks/play-cms/devops
  stage: publish
  tags:
    - sbt
  variables:
    ANSIBLE_OPTION_PLAYCMS_GIT_VERSION: "${CI_BUILD_REF_NAME}"
  script:
    - docker login -u ${DOCKER_REGISTRY_USERNAME} -p ${DOCKER_REGISTRY_PASSWORD} docker.insign.rocks
    - ci publish ${CI_BUILD_REF_NAME} ${CI_BUILD_REF_NAME}
  only:
    - master
    - /^*\.*\.x$/

# Publish the application to docker registry
# branch: production with tag
Publish production:
  image: docker.insign.rocks/play-cms/devops
  stage: publish
  tags:
    - sbt
  variables:
    ANSIBLE_OPTION_PLAYCMS_GIT_VERSION: "2.7.x"
  script:
    - docker login -u ${DOCKER_REGISTRY_USERNAME} -p ${DOCKER_REGISTRY_PASSWORD} docker.insign.rocks
    - ci publish ${CI_BUILD_REF_NAME} ${CI_COMMIT_TAG}
  only:
    - tags

# Deploy the application to DEV environment on Kubernetes
# branch: master
Deploy DEV to K8S:
  image: docker.insign.rocks/play-cms/devops
  stage: deploy
  cache:
    policy: pull
  script:
    - ci deploy_k8s ${CI_BUILD_REF_NAME}
  variables:
    ANSIBLE_OPTION_APP_NAME: "${APP_NAME}"
    ANSIBLE_OPTION_APP_VERSION_BRANCH: "${CI_BUILD_REF_NAME}"
    ANSIBLE_OPTION_APP_VERSION_BUILDNO: "${CI_PIPELINE_ID}"
    ANSIBLE_OPTION_LETSENCRYPT_ENABLE: "true"
    ANSIBLE_OPTION_LETSENCRYPT_STAGING: "false"
    ANSIBLE_OPTION_ELASTICSEARCH_ENABLE: "true"
    ANSIBLE_OPTION_K8S_SERVER: "${K8S_SERVER}"
    ANSIBLE_OPTION_K8S_DOCKER_REGISTRY_AUTH_TOKEN: "${K8S_DOCKER_REGISTRY_AUTH_TOKEN}"
    ANSIBLE_OPTION_K8S_CERTIFICATE_AUTHORITY_DATA: "${K8S_CERTIFICATE_AUTHORITY_DATA}"
    ANSIBLE_OPTION_K8S_CLIENT_CERTIFICATE_DATA: "${K8S_CLIENT_CERTIFICATE_DATA}"
    ANSIBLE_OPTION_K8S_CLIENT_KEY_DATA: "${K8S_CLIENT_KEY_DATA}"
    ANSIBLE_OPTION_K8S_NAMESPACE: "${APP_NAME}-dev"
    ANSIBLE_OPTION_SRV_NAME: "${DEV_APP_HOST}"
    ANSIBLE_OPTION_APP_SECRET: "${DEV_APP_SECRET}"
    ANSIBLE_OPTION_MYSQL_PASSWORD: "${DEV_MYSQL_PASSWORD}"
    ANSIBLE_OPTION_MYSQL_ROOT_PASSWORD: "${DEV_MYSQL_ROOT_PASSWORD}"
    ANSIBLE_OPTION_PLAYCMS_GIT_VERSION: "${CI_BUILD_REF_NAME}"
    ANSIBLE_OPTION_AUTH_BASIC_ENABLE: "true"
    ANSIBLE_OPTION_K8S_FORCE_REDEPLOY_APP: "true"
  only:
    - master
    - /^*\.*\.x$/

# Deploy the application to STAGE environment on Kubernetes
# branch: production with tag
Deploy STAGE to K8S:
  image: docker.insign.rocks/play-cms/devops
  stage: deploy
  cache:
    policy: pull
  script:
    - ci deploy_k8s ${CI_COMMIT_TAG}
  variables:
    ANSIBLE_OPTION_APP_NAME: "${APP_NAME}"
    ANSIBLE_OPTION_APP_VERSION_BRANCH: "${CI_BUILD_REF_NAME}"
    ANSIBLE_OPTION_APP_VERSION_BUILDNO: "${CI_PIPELINE_ID}"
    ANSIBLE_OPTION_LETSENCRYPT_ENABLE: "true"
    ANSIBLE_OPTION_LETSENCRYPT_STAGING: "false"
    ANSIBLE_OPTION_ELASTICSEARCH_ENABLE: "true"
    ANSIBLE_OPTION_K8S_SERVER: "${K8S_SERVER}"
    ANSIBLE_OPTION_K8S_DOCKER_REGISTRY_AUTH_TOKEN: "${K8S_DOCKER_REGISTRY_AUTH_TOKEN}"
    ANSIBLE_OPTION_K8S_CERTIFICATE_AUTHORITY_DATA: "${K8S_CERTIFICATE_AUTHORITY_DATA}"
    ANSIBLE_OPTION_K8S_CLIENT_CERTIFICATE_DATA: "${K8S_CLIENT_CERTIFICATE_DATA}"
    ANSIBLE_OPTION_K8S_CLIENT_KEY_DATA: "${K8S_CLIENT_KEY_DATA}"
    ANSIBLE_OPTION_K8S_NAMESPACE: "${APP_NAME}-stage"
    ANSIBLE_OPTION_SRV_NAME: "${STAGE_APP_HOST}"
    ANSIBLE_OPTION_APP_SECRET: "${STAGE_APP_SECRET}"
    ANSIBLE_OPTION_MYSQL_PASSWORD: "${STAGE_MYSQL_PASSWORD}"
    ANSIBLE_OPTION_MYSQL_ROOT_PASSWORD: "${STAGE_MYSQL_ROOT_PASSWORD}"
    ANSIBLE_OPTION_PLAYCMS_GIT_VERSION: "2.7.x"
    ANSIBLE_OPTION_AUTH_BASIC_ENABLE: "true"
  only:
    - tags
  except:
    - /^(?:production).+@/

# Deploy the application to PROD environment on Kubernetes
# branch: production with tag
Deploy PROD to K8S:
  image: docker.insign.rocks/play-cms/devops
  stage: deploy
  cache:
    policy: pull
  script:
    - ci deploy_k8s ${CI_COMMIT_TAG}
  variables:
    ANSIBLE_OPTION_APP_NAME: "${APP_NAME}"
    ANSIBLE_OPTION_APP_VERSION_BRANCH: "${CI_BUILD_REF_NAME}"
    ANSIBLE_OPTION_APP_VERSION_BUILDNO: "${CI_PIPELINE_ID}"
    ANSIBLE_OPTION_LETSENCRYPT_ENABLE: "true"
    ANSIBLE_OPTION_LETSENCRYPT_STAGING: "false"
    ANSIBLE_OPTION_ELASTICSEARCH_ENABLE: "true"
    ANSIBLE_OPTION_K8S_SERVER: "${K8S_SERVER}"
    ANSIBLE_OPTION_K8S_DOCKER_REGISTRY_AUTH_TOKEN: "${K8S_DOCKER_REGISTRY_AUTH_TOKEN}"
    ANSIBLE_OPTION_K8S_CERTIFICATE_AUTHORITY_DATA: "${K8S_CERTIFICATE_AUTHORITY_DATA}"
    ANSIBLE_OPTION_K8S_CLIENT_CERTIFICATE_DATA: "${K8S_CLIENT_CERTIFICATE_DATA}"
    ANSIBLE_OPTION_K8S_CLIENT_KEY_DATA: "${K8S_CLIENT_KEY_DATA}"
    ANSIBLE_OPTION_K8S_NAMESPACE: "${APP_NAME}-prod"
    ANSIBLE_OPTION_SRV_NAME: "${PROD_APP_HOST}"
    ANSIBLE_OPTION_APP_SECRET: "${PROD_APP_SECRET}"
    ANSIBLE_OPTION_MYSQL_PASSWORD: "${PROD_MYSQL_PASSWORD}"
    ANSIBLE_OPTION_MYSQL_ROOT_PASSWORD: "${PROD_MYSQL_ROOT_PASSWORD}"
    ANSIBLE_OPTION_PLAYCMS_GIT_VERSION: "2.7.x"
  only:
    - tags
  when: manual

# Deploy the application to PROD environment
# branch: production with tag
Deploy PROD:
  image: docker.insign.rocks/play-cms/devops
  stage: deploy
  cache:
    policy: pull
  environment:
    name: preview
    url: https://preview.play-cms-demo.insign.rocks
  tags:
    - sbt
  script:
    - docker login -u ${DOCKER_REGISTRY_USERNAME} -p ${DOCKER_REGISTRY_PASSWORD} docker.insign.rocks
    - ci deploy live ${CI_COMMIT_TAG}
  variables:
    ANSIBLE_OPTION_DOCKER_REGISTRY_USER: "${DOCKER_REGISTRY_USERNAME}"
    ANSIBLE_OPTION_DOCKER_REGISTRY_PASSWORD: "${DOCKER_REGISTRY_PASSWORD}"
    ANSIBLE_OPTION_MYSQL_PASSWORD: "${MYSQL_PASSWORD}"
    ANSIBLE_OPTION_MYSQL_ROOT_PASSWORD: "${MYSQL_ROOT_PASSWORD}"
    ANSIBLE_OPTION_APP_NAME: "${APP_NAME}"
    ANSIBLE_OPTION_APP_SECRET: "${APP_SECRET}"
    ANSIBLE_OPTION_APP_VERSION_BRANCH: "${CI_BUILD_REF_NAME}"
    ANSIBLE_OPTION_APP_VERSION_BUILDNO: "${CI_PIPELINE_ID}"
    ANSIBLE_OPTION_ELASTICSEARCH_ENABLE: "true"
    ANSIBLE_OPTION_LETSENCRYPT_ENABLE: "true"
    ANSIBLE_OPTION_LETSENCRYPT_STAGING: "false"
    ANSIBLE_OPTION_PLAYCMS_GIT_VERSION: "2.7.x"
  only:
    - tags

# Switch production (uses in blue/green deployment)
# branch: production with tag
Switch PROD:
  image: docker.insign.rocks/play-cms/devops
  stage: switch
  cache:
    policy: pull
  environment:
    name: live
    url: https://play-cms-demo.insign.rocks
  tags:
    - sbt
  script:
    - ci switch live
  variables:
    ANSIBLE_OPTION_MYSQL_PASSWORD: "${MYSQL_PASSWORD}"
    ANSIBLE_OPTION_MYSQL_ROOT_PASSWORD: "${MYSQL_ROOT_PASSWORD}"
    ANSIBLE_OPTION_PLAYCMS_GIT_VERSION: "2.7.x"
  only:
    - tags
  when: manual
